{
  "language": "Solidity",
  "sources": {
    "contracts/AdminBepepeToken.sol": {
      "content": "/**\r\n * @file contracts/AdminBepepeToken.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/IBepepeAdmin.sol\";\r\n\r\n/**\r\n * @dev Admin contract storing payment token prices, etc.\r\n *      Only the owner here can do updates. Not verified publicly if you prefer,\r\n *      but it remains visible on-chain.\r\n */\r\ncontract AdminBepepeToken is Ownable, IBepepeAdmin {\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping(address => uint256) private _paymentTokenPrices;\r\n\r\n    function getPaymentTokenPrice(address token) external view override returns (uint256) {\r\n        return _paymentTokenPrices[token];\r\n    }\r\n\r\n    function setPaymentTokenPrice(address token, uint256 price) external onlyOwner {\r\n        _paymentTokenPrices[token] = price;\r\n    }\r\n\r\n    function withdrawPaymentToken(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/UserBepepeToken.sol": {
      "content": "/**\r\n * @file contracts/UserBepepeToken.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; // Import Ownable;\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/AggregatorV3Interface.sol\";\r\nimport \"./interfaces/IBepepeAdmin.sol\";\r\n\r\n/**\r\n * @title UserBepepeToken\r\n * @dev BEPEPE token (user-facing). Users can buy and sell tokens at a fixed $7 price\r\n *      using Chainlink for BNB/USD and an external admin contract for ERC20 payment token pricing.\r\n */\r\ncontract UserBepepeToken is ERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AggregatorV3Interface public bnbUsdPriceFeed;\r\n    IBepepeAdmin public adminContract;\r\n    uint256 public constant TOKEN_PRICE_USD = 7 * 1e18;\r\n    string public logoURI;\r\n\r\n    event TokensPurchased(address indexed buyer, uint256 bepepeAmount, uint256 cost);\r\n    event TokensSwapped(address indexed user, uint256 bepepeAmount, address paymentToken, uint256 paymentAmount);\r\n\r\n    constructor(uint256 initialSupply, address priceFeedAddr, string memory initialLogoURI, address adminAddr) ERC20(\"BEPEPE\", \"PEPE\") {\r\n        _mint(msg.sender, initialSupply);\r\n        bnbUsdPriceFeed = AggregatorV3Interface(priceFeedAddr);\r\n        logoURI = initialLogoURI;\r\n        adminContract = IBepepeAdmin(adminAddr);\r\n    }\r\n\r\n    function buyTokens() external payable {\r\n        require(msg.value > 0, \"No BNB sent\");\r\n        (, int256 bnbUsdPrice,,,) = bnbUsdPriceFeed.latestRoundData();\r\n        require(bnbUsdPrice > 0, \"Invalid price feed\");\r\n        uint256 bnbValueInUsd18 = (msg.value * uint256(bnbUsdPrice)) / 1e8;\r\n        uint256 tokensToBuy = bnbValueInUsd18 / TOKEN_PRICE_USD;\r\n        require(tokensToBuy > 0, \"Not enough BNB for 1 token\");\r\n        require(balanceOf(address(this)) >= tokensToBuy, \"Not enough tokens in contract\");\r\n        _transfer(address(this), msg.sender, tokensToBuy);\r\n        emit TokensPurchased(msg.sender, tokensToBuy, msg.value);\r\n    }\r\n\r\n    function buyTokensWithToken(address _paymentToken, uint256 _amount) external {\r\n        require(_amount > 0, \"Payment must be > 0\");\r\n        uint256 price = adminContract.getPaymentTokenPrice(_paymentToken);\r\n        require(price > 0, \"Unsupported payment token\");\r\n        uint256 tokensToBuy = (_amount * 1e18) / price;\r\n        require(tokensToBuy > 0, \"Amount too small for 1 token\");\r\n        require(balanceOf(address(this)) >= tokensToBuy, \"Not enough tokens in contract\");\r\n        IERC20(_paymentToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        _transfer(address(this), msg.sender, tokensToBuy);\r\n        emit TokensPurchased(msg.sender, tokensToBuy, _amount);\r\n    }\r\n\r\n    function sellTokensForBNB(uint256 tokenAmount) external {\r\n        require(tokenAmount > 0, \"Token amount must be > 0\");\r\n        (, int256 bnbUsdPrice,,,) = bnbUsdPriceFeed.latestRoundData();\r\n        require(bnbUsdPrice > 0, \"Invalid price feed\");\r\n        uint256 usdValue18 = tokenAmount * TOKEN_PRICE_USD;\r\n        uint256 bnbValue18 = (usdValue18 * 1e8) / uint256(bnbUsdPrice);\r\n        uint256 bnbOwed = bnbValue18 / 1e18;\r\n        require(bnbOwed > 0, \"Too few tokens to swap\");\r\n        require(address(this).balance >= bnbOwed, \"Not enough BNB in contract\");\r\n        _transfer(msg.sender, address(this), tokenAmount);\r\n        payable(msg.sender).transfer(bnbOwed);\r\n        emit TokensSwapped(msg.sender, tokenAmount, address(0), bnbOwed);\r\n    }\r\n\r\n    function sellTokensForToken(address _paymentToken, uint256 tokenAmount) external {\r\n        require(tokenAmount > 0, \"Token amount must be > 0\");\r\n        uint256 price = adminContract.getPaymentTokenPrice(_paymentToken);\r\n        require(price > 0, \"Unsupported payment token\");\r\n        uint256 paymentAmount = (tokenAmount * price) / 1e18;\r\n        require(paymentAmount > 0, \"Too few tokens to swap\");\r\n        require(IERC20(_paymentToken).balanceOf(address(this)) >= paymentAmount, \"Not enough payment token in contract\");\r\n        _transfer(msg.sender, address(this), tokenAmount);\r\n        IERC20(_paymentToken).safeTransfer(msg.sender, paymentAmount);\r\n        emit TokensSwapped(msg.sender, tokenAmount, _paymentToken, paymentAmount);\r\n    }\r\n\r\n    function getTokenValueForPaymentToken(address _paymentToken, uint256 bepepeAmount) external view returns (uint256) {\r\n        uint256 price = adminContract.getPaymentTokenPrice(_paymentToken);\r\n        require(price > 0, \"Unsupported payment token\");\r\n        return (bepepeAmount * price) / 1e18;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/MockERC20.sol": {
      "content": "/**\r\n * @file contracts/MockERC20.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    constructor(string memory name, string memory symbol, uint256 initialSupply)\r\n        ERC20(name, symbol)\r\n    {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/MockAggregator.sol": {
      "content": "/**\r\n * @file contracts/MockAggregator.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"./interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract MockAggregator is AggregatorV3Interface {\r\n    uint8 public override decimals = 8;\r\n    string public override description = \"Mock Price Feed\";\r\n    uint256 public override version = 1;\r\n    int256 private _price;\r\n\r\n    constructor(int256 initialPrice) {\r\n        _price = initialPrice;\r\n    }\r\n\r\n    function getRoundData(uint80) external view override returns (uint80, int256, uint256, uint256, uint80) {\r\n        return (0, _price, 0, 0, 0);\r\n    }\r\n\r\n    function latestRoundData() external view override returns (uint80, int256, uint256, uint256, uint80) {\r\n        return (0, _price, 0, 0, 0);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IBepepeAdmin.sol": {
      "content": "/**\r\n * @file contracts/IBepepeAdmin.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IBepepeAdmin {\r\n    function getPaymentTokenPrice(address token) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/AggregatorV3Interface.sol": {
      "content": "/**\r\n * @file contracts/AggregatorV3Interface.sol\r\n * Submitted for verification at BscScan.com on 2025-04-16\r\n * Compiler: Solidity ^0.8.28\r\n * License: MIT\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n    function description() external view returns (string memory);\r\n    function version() external view returns (uint256);\r\n    function getRoundData(uint80 _roundId) external view returns (uint80, int256, uint256, uint256, uint80);\r\n    function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\nimport \"../utils/Context.sol\";\nabstract contract Ownable is Context { address private _owner; /* ... */ }\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (token/ERC20/ERC20.sol)\npragma solidity ^0.8.0;\nimport \"./IERC20.sol\"; /* ... */\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (token/ERC20/utils/SafeERC20.sol)\npragma solidity ^0.8.0;\nimport \"../IERC20.sol\"; /* ... */\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "metadata": {
      "useLiteralContent": true,
      "bytecodeHash": "none"
    },
    "outputSelection": {
      "*": {
        "*": ["abi", "evm.bytecode.object"]
      }
    }
  }
}
